1) Docker is a container technology: A tool for creating and maintaining containers.

2) Container is package which contains code and dependencies to run that code. Same container always yields the exact same application and execution behaviour.

3) It creates reliable and reproduciable environments.

4) One container is independent from other containers.

5) Operating System -> Built-in Container support system -> Docker Engine -> (ContainerA, ContainerB ,.....).
    One container for each application.

6) Install Docker Engine, Docker Desktop and Docker CLI. Docker Hub to host the images on cloud. Docker Compose to handle multiple containers for a project.

7) Images and Containers are the two core concepts of Docker.

8) Images are blueprints/templates for Containers. We can create one Image and make multiple containers using that one image.

9) Image contains setup instructions for the code, application code which can be run on any server/machine and Contianers are running instance of the image.

10) Two ways of finding/creating an image
    a) Use an existing or pre-built image (mostly from Docker Hub)
    b) Creating a custom image

11) Everytime we run the command "docker run", it creates a new instance of the image.

12) Whenever there is a change in the application code, we need to build again and then run the docker image.

13) whenever we build the Dockerfile file, docker caches the result of each instruction, so if there are no changes in the instructions and code, the build always finishes quickly as it uses the cache information.

14) Docker follows layer based architecture, means every instruction inside the Dockerfile represents a layer and the final image is a combination of all these small layers. Image is generally refered as read only entity, whereas a container is the final layer on top of all the instructions layers and refered as read-write entity.

15) To optimize the performance of docker, we should write the instructions appropriately in the Dockerfile. 
    which instructions come before or after? 

16) we can restart the existing container, rather than creating new container evertime.

17) To specify a particular version of the image, you can use tag along with colon(name:tag). Eg:- node:14
    here node is the name and 14 is the tag/version.

18) Images are read only and container are read-write, but cannot be used to store permanent data such as user data which is typically saved in a database. So, in order to save data permanently we use volumes.

19) Volumes are folders on local host machine, which are mapped to docker container, so that the changes are permanent even after removing the container.

20) There are two types of external data storages:
    a) Volumes: managed by docker
    b) Bind Mounts: managed by developers

21) Volumes are of two types: Anonymous Volumes and Named Volumes
    Anonymous Volumes -> Docker sets up the path on our local machine, but we don't know the exact location. Anonymous volumes are deleted after removing the container from the system.
    Named volumes -> Defined path in the container is mapped to the created volume, but cannot be find/edited on local machine. Good for the persistent data which you don't need to edit directly.

22) Named volumes are not specified inside the Dockerfile, but needs to be specified at the time container creation command(docker run -v folder:path). multiple conta can use same named volume.

23) Using Bind Mounts, we can define a path/folder in our local machine to use as external storage. Great for persistent and editable data.

24) Using VOLUME and -v commands are same for all different types of volumes, but the usage is different.

25) Bind mapping completely binds the folders in the local system and inside the container.

26) Anonymous volumes - Can be shared by only one container, once container is removed, the data is gone and also these volumes are not re-usable, as there is no name for the volume.

27) Named volumes - Can be used by different containers even after removing the container.

28) Bind Mounts - Can be attached to multiple containers. local path is just mounted, docker cannot change the contents.

29) If we use bind mount, then there is no need to copy the application code to workdir while building the project. It's better to use COPY rather than the bind Mounts.

30) Docker supports build-time arguments and run-time environment variables.
    a) ARG - variables available inside the Dockerfile, not acessible in CMD or application code. set on image build.
    b) ENV - variables available in Dockerfile and in application code. set by ENV in Dockerfile or by --env on docker run.

31) Three general type of communications in containers are 
    a) Container to WWW communication.
    b) Container to Local Host Machine communication.
    c) Container to Conatainer communication.

32) All communications to WWW would work fine from the container, but the local host machine communication has issues to find the ip address. In order to fix that issue, instead of localhost we should use (host.docker.internal:).

33) In order to establish the Container to Conatainer communication, we must use the ip address of one container inside the another container as domain. we can get the container ip address from inspect command.

34) Rather finding ip address of other containers evertime, we can just keep all the container in one network. Within the Docker network, all containers can communicate with each other and IP's are automatically resolved.

35) Unlike volumes, docker does not create networks automatically whiler running the containers. We should create a network before using it any further. Instead of using the other container's ip address, now we can use the container name as domain/ip.